{
    "functions": {
        "FlxColor": {
            "returns": "number",
            "args": "color:String",
            "documentation": "Returns color from a string."
        },
        "addAnimation": {
            "returns": "void",
            "args": "obj:String, name:String, frames:Array\u003cInt\u003e, framerate:Int = 24, loop:Bool = true",
            "documentation": "Adds a animation to specific sprite"
        },
        "addAnimationByIndices": {
            "returns": "void",
            "args": "obj:String, name:String, prefix:String, indices:String, framerate:Int = 24, loop:Bool = false",
            "documentation": "Adds an animation `name` to the Lua Sprite/Object using the tag/variable `tag` with the specified indices on `indices`, it will also overwrite another animation using the same name.\n* `obj` - Lua Sprite tag or Object variable name\n* `name` - Animation to be added's name\n* `prefix` - Animation name on the .xml file\n* `indices` - What frames the animation should use, must be separated with a comma. Example: `1, 2, 3, 4, 5, 3, 4, 5`\n* `framerate` - Optional value, how many frames per second does the animation have, Default value is `24`"
        },
        "addAnimationByIndicesLoop": {
            "returns": "void",
            "args": "obj:String, name:String, prefix:String, indices:String, framerate:Int = 24",
            "documentation": "Adds a animation by indices to specific sprite"
        },
        "addAnimationByPrefix": {
            "returns": "void",
            "args": "obj:String, name:String, prefix:String, framerate:Int = 24, loop:Bool = true",
            "documentation": "Adds an animation `name` to the Lua Sprite/Object using the tag/variable `tag`, it will also overwrite another animation using the same name.\n* `obj` - Lua Sprite tag or Object variable name\n* `name` - Animation to be added's name\n* `prefix` - Animation name on the .xml file\n* `framerate` - Optional value, how many frames per second does the animation have, Default value is `24`\n* `loop` - Optional value, should the animation loop? Default value: `true`"
        },
        "addCharacterToList": {
            "returns": "void",
            "args": "name:String, type:String",
            "documentation": "Creates a character for the `'Change Character'` event.\n* `name` - Character name, example: `pico-player`, `mom-car`, `gf`, etc.\n* `type` - Character type, 'boyfriend' for player, 'dad' for opponent, 'gf' for girlfriend."
        },
        "addHaxeLibrary": {
            "returns": "void",
            "args": "libName:String, ?libPackage:String = ''",
            "documentation": "Adds a haxe library to all hscript scripts"
        },
        "addHealth": {
            "returns": "void",
            "args": "value:Float = 0",
            "documentation": "Adds player's health ranged from `0` to `2`"
        },
        "addHits": {
            "returns": "void",
            "args": "value:Int = 0",
            "documentation": "Adds `value` to the current song's notes hit total and recalculates rating"
        },
        "addInstance": {
            "returns": "void",
            "args": "objectName:String, ?inFront:Bool = false",
            "documentation": "Adds a flixel object to the stage."
        },
        "addLuaScript": {
            "returns": "void",
            "args": "luaFile:String, ?ignoreAlreadyRunning:Bool = false",
            "documentation": "Loads another .lua script.\n* `path` - Path to LUA relative to the base folder"
        },
        "addLuaSprite": {
            "returns": "void",
            "args": "tag:String, front:Bool = false",
            "documentation": "Adds a Lua Sprite with the specified tag, either in front or behind the characters."
        },
        "addLuaText": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "Spawns a Lua Text on the stage"
        },
        "addMisses": {
            "returns": "void",
            "args": "value:Int = 0",
            "documentation": "Adds `value` to the current song's misses total and recalculates rating"
        },
        "addOffset": {
            "returns": "void",
            "args": "obj:String, anim:String, x:Float, y:Float",
            "documentation": "Adds offset to the animation of specific sprite"
        },
        "addScore": {
            "returns": "void",
            "args": "value:Int = 0",
            "documentation": "Adds `value` to the current song's score and recalculates rating"
        },
        "anyGamepadJustPressed": {
            "returns": "boolean",
            "args": "name:String",
            "documentation": "Checks if any gamepad specific button was just pressed"
        },
        "anyGamepadPressed": {
            "returns": "boolean",
            "args": "name:String",
            "documentation": "Checks if any gamepad specific button is pressed"
        },
        "anyGamepadReleased": {
            "returns": "boolean",
            "args": "name:String",
            "documentation": "Checks if any gamepad specific button was just released"
        },
        "callMethod": {
            "returns": "?",
            "args": "funcToRun:String, ?args:Array\u003cDynamic\u003e = null",
            "documentation": "Calls a method from the PlayState instance."
        },
        "callMethodFromClass": {
            "returns": "?",
            "args": "className:String, funcToRun:String, ?args:Array\u003cDynamic\u003e = null",
            "documentation": "Call a method from a `className` instance."
        },
        "callOnLuas": {
            "returns": "boolean",
            "args": "funcName:String, ?args:Array<Dynamic> = null, ?ignoreStops=false, ?ignoreSelf:Bool = true, ?excludeScripts:Array<String> = null, ?excludeValues:Array<Dynamic> = null",
            "documentation": "Calls function on ALL lua scripts"
        },
        "setOnLuas": {
            "returns": "void",
            "args": "varName:String, arg:Dynamic, ?ignoreSelf:Bool = false, ?exclusions:Array<String> = null",
            "documentation": "Sets a variable on ALL lua scripts"
        },
        "callScript": {
            "returns": "void",
            "args": "luaFile:String, funcName:String, ?args:Array\u003cDynamic\u003e = null",
            "documentation": "Calls a function on specific lua script"
        },
        "cameraFade": {
            "returns": "void",
            "args": "camera:String, color:String, duration:Float,forced:Bool",
            "documentation": "* `camera` - \"game\",\"hud\" or \"other\"\n* `color` - color of fade\n* `duration` - Time duration for it to fade\n* `forced` - restarts fade or not"
        },
        "cameraFlash": {
            "returns": "void",
            "args": "camera:String, color:String, duration:Float,forced:Bool",
            "documentation": "* `camera` - \"game\",\"hud\" or \"other\"\n* `color` - color of flash\n* `duration` - Time duration for it to flash\n* `forced` - restarts flash or not"
        },
        "cameraSetTarget": {
            "returns": "void",
            "args": "target:String",
            "documentation": "Makes the camera focus on a specific target\n* `target` - Target can be either `boyfriend` or `dad`"
        },
        "cameraShake": {
            "returns": "void",
            "args": "camera:String, intensity:Float, duration:Float",
            "documentation": "* `camera` - \"game\",\"hud\" or \"other\"\n* `intensity` - How far away should it shake, recommended value is `0.05`\n* `duration` - Time duration for it to shake"
        },
        "cancelTimer": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "Cancels a timer using the tag `tag`, if there even is one."
        },
        "cancelTween": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "Cancels a tween using the tag `tag`, if there even is one."
        },
        "changeDiscordClientID": {
            "returns": "void",
            "args": "?newID:String = null",
            "documentation": "Changes the Discord RPC client ID.\nSee: https://discord.com/developers/applications/"
        },
        "changeDiscordPresence": {
            "returns": "void",
            "args": "details:String, state:Null\u003cString\u003e, ?smallImageKey:String, ?hasStartTimestamp:Bool, ?endTimestamp:Float",
            "documentation": "Changes the Discord RPC status."
        },
        "changePresence": {
            "returns": "void",
            "args": "details:String, state:Null\u003cString\u003e, ?smallImageKey:String, ?hasStartTimestamp:Bool, ?endTimestamp:Float",
            "documentation": "Changes discordrpc presence",
            "deprecated": "Removed from the API."
        },
        "characterDance": {
            "returns": "void",
            "args": "character:String",
            "documentation": "Makes character do the idle dance\n* `character` - Can be `boyfriend`, `dad` or `gf`"
        },
        "characterPlayAnim": {
            "returns": "void",
            "args": "character:String, anim:String, ?forced:Bool = false",
            "documentation": "* `character` - Can be `boyfriend`, `dad` or `gf`\n*`anim` - Animation name to be played\n* `forced` - Can be either `true` or `false`, if set to `true`, it will force the animation to reset if the current animation is the same as the animation to play"
        },
        "checkFileExists": {
            "returns": "boolean",
            "args": "filename:String, ?absolute:Bool = false",
            "documentation": "Checks if specific path exists"
        },
        "close": {
            "returns": "void",
            "args": "printMessage:Bool",
            "documentation": "Stops your script in the next 100 miliseconds.\n* `printMessage` - Wether you want a warning to show on the top-left corner of the screen or not"
        },
        "closeCustomSubstate": {
            "returns": "void",
            "args": "",
            "documentation": "Closes current active substate"
        },
        "createInstance": {
            "returns": "boolean",
            "args": "variableToSave:String, className:String, ?args:Array\u003cDynamic\u003e = null",
            "documentation": "Creates a new instance of `className`."
        },
        "debugPrint": {
            "returns": "void",
            "args": "text1:Dynamic = '', text2:Dynamic = '', text3:Dynamic = '', text4:Dynamic = '', text5:Dynamic = ''",
            "documentation": "* Prints a debug message on the top-left corner of the screen\n* All values are optional\n* You can have up to 5 values to be printed.\n\nExample: `debugPrint(\"Current boyfriend character: \", getProperty(\"boyfriend.curCharacter\"));`\n\nThis will print the following message: `Current boyfriend character: bf`"
        },
        "deleteFile": {
            "returns": "void",
            "args": "path:String, ?ignoreModFolders:Bool = false",
            "documentation": "Deletes a path"
        },
        "directoryFileList": {
            "returns": "array",
            "args": "folder:String",
            "documentation": "Returns array of filenames in `folder`"
        },
        "doTweenAlpha": {
            "returns": "void",
            "args": "tag:String, vars:String, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's Alpha value\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `boyfriend` for tweening Boyfriend's X position, `boyfriend.scale` for tweening Boyfriend's Scale X\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To do a tween to Boyfriend's Scale X, you should use `doTweenX('bfScaleTweenX', 'boyfriend.scale', 1.5, 1, 'elasticInOut')`, when the tween ends, it will do a callback for `onTweenCompleted('bfScaleTweenX')`"
        },
        "doTweenAngle": {
            "returns": "void",
            "args": "tag:String, vars:String, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's Angle value\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `boyfriend` for tweening Boyfriend's X position, `boyfriend.scale` for tweening Boyfriend's Scale X\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To do a tween to Boyfriend's Scale X, you should use `doTweenX('bfScaleTweenX', 'boyfriend.scale', 1.5, 1, 'elasticInOut')`, when the tween ends, it will do a callback for `onTweenCompleted('bfScaleTweenX')`"
        },
        "doTweenColor": {
            "returns": "void",
            "args": "tag:String, vars:String, targetColor:String, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's color\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `boyfriend` for tweening Boyfriend's X position, `boyfriend.scale` for tweening Boyfriend's Scale X\n* `targetColor` - The color the object will have when the tween ends (Must be in hexadecimal!)\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To tween Boyfriend's color to Red, you should use `doTweenColor('bfColorTween', 'boyfriend', 'FF0000', 1, 'linear')`, when the tween ends, it will do a callback for `onTweenCompleted('bfColorTween')`"
        },
        "doTweenX": {
            "returns": "void",
            "args": "tag:String, vars:String, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's X value\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `boyfriend` for tweening Boyfriend's X position, `boyfriend.scale` for tweening Boyfriend's Scale X\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To do a tween to Boyfriend's Scale X, you should use `doTweenX('bfScaleTweenX', 'boyfriend.scale', 1.5, 1, 'elasticInOut')`, when the tween ends, it will do a callback for `onTweenCompleted('bfScaleTweenX')`"
        },
        "doTweenY": {
            "returns": "void",
            "args": "tag:String, vars:String, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a Tween on an object's Y value\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `vars` - Variable to tween, example: `boyfriend` for tweening Boyfriend's X position, `boyfriend.scale` for tweening Boyfriend's Scale X\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To do a tween to Boyfriend's Scale X, you should use `doTweenX('bfScaleTweenX', 'boyfriend.scale', 1.5, 1, 'elasticInOut')`, when the tween ends, it will do a callback for `onTweenCompleted('bfScaleTweenX')`"
        },
        "doTweenZoom": {
            "returns": "void",
            "args": "tag:String, vars:String, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a Tween on a Camera's Zoom\n\n**Calling this function will cancel another tween that is using the same tag!**\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `cam` - Should be `camGame`, `camHUD` or `camOther`\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note i've added up here\n\nExample: To do a tween to Boyfriend's Scale X, you should use `doTweenX('bfScaleTweenX', 'boyfriend.scale', 1.5, 1, 'elasticInOut')`, when the tween ends, it will do a callback for `onTweenCompleted('bfScaleTweenX')`"
        },
        "endSong": {
            "returns": "void",
            "args": "",
            "documentation": "In case you forced a song end for doing a post-song cutscene or something, this ends the song manually."
        },
        "exitSong": {
            "returns": "void",
            "args": "?skipTransition:Bool = false",
            "documentation": "Exits current song and goes to Menu"
        },
        "flushSaveData": {
            "returns": "void",
            "args": "name:String",
            "documentation": "Saves specific save"
        },
        "gamepadAnalogX": {
            "returns": "number",
            "args": "id:Int, ?leftStick:Bool = true",
            "documentation": "Returns the x of `id` analog"
        },
        "gamepadAnalogY": {
            "returns": "number",
            "args": "id:Int, ?leftStick:Bool = true",
            "documentation": "Returns the y of `id` analog"
        },
        "gamepadJustPressed": {
            "returns": "boolean",
            "args": "id:Int, name:String",
            "documentation": "Checks if gamepad with id `id` specific button was just pressed"
        },
        "gamepadPressed": {
            "returns": "boolean",
            "args": "id:Int, name:String",
            "documentation": "Checks if gamepad with id `id` specific button is pressed"
        },
        "gamepadReleased": {
            "returns": "boolean",
            "args": "id:Int, name:String",
            "documentation": "Checks if gamepad with id `id` specific button was just released"
        },
        "getCharacterX": {
            "returns": "number",
            "args": "type:String",
            "documentation": "Gets the general X position of a character from the type `type`\n* `type` - Can be `boyfriend`, `dad` or `gf`"
        },
        "getCharacterY": {
            "returns": "number",
            "args": "type:String",
            "documentation": "Gets the general Y position of a character from the type `type`\n* `type` - Can be `boyfriend`, `dad` or `gf`"
        },
        "getColorFromHex": {
            "returns": "number",
            "args": "color:String",
            "documentation": "Get the color decimal ID from an Hexadecimal value (`color`).\n\nExample: To get orange, you should use `getColorFromHex('FF7800')` or `getColorFromHex('0xFFFF7800')`"
        },
        "getColorFromName": {
            "returns": "number",
            "args": "color:String",
            "documentation": "Returns color from a string."
        },
        "getColorFromString": {
            "returns": "number",
            "args": "color:String",
            "documentation": "Returns color from a string."
        },
        "getDataFromSave": {
            "returns": "?",
            "args": "name:String, field:String, ?defaultValue:Dynamic = null",
            "documentation": "Returns data of specific save"
        },
        "getGlobalFromScript": {
            "returns": "?",
            "args": "luaFile:String, global:String",
            "documentation": "Gets a global field from specific lua script"
        },
        "getGraphicMidpointX": {
            "returns": "number",
            "args": "variable:String",
            "documentation": "Returns the midpoint X of specific FlxSprite graphic"
        },
        "getGraphicMidpointY": {
            "returns": "number",
            "args": "variable:String",
            "documentation": "Returns the midpoint Y of specific FlxSprite graphic"
        },
        "getHealth": {
            "returns": "number",
            "args": "",
            "documentation": "Returns player's health ranged from `0` to `2`"
        },
        "getHits": {
            "returns": "number",
            "args": "",
            "documentation": "Returns current game hits"
        },
        "getMidpointX": {
            "returns": "number",
            "args": "variable:String",
            "documentation": "Returns the midpoint X of specific FlxSprite hitbox"
        },
        "getMidpointY": {
            "returns": "number",
            "args": "variable:String",
            "documentation": "Returns the midpoint Y of specific FlxSprite hitbox"
        },
        "getMisses": {
            "returns": "number",
            "args": "",
            "documentation": "Returns current game misses"
        },
        "getMouseX": {
            "returns": "number",
            "args": "camera:String",
            "documentation": "Returns the relative mouse X position on a specific camera\n* `camera` - Can be either `game`, `hud` or `other`"
        },
        "getMouseY": {
            "returns": "number",
            "args": "camera:String",
            "documentation": "Returns the relative mouse Y position on a specific camera\n* `camera` - Can be either `game`, `hud` or `other`"
        },
        "getObjectOrder": {
            "returns": "number",
            "args": "obj:String",
            "documentation": "Gets the object's layer position\n* `obj` - Object variable/Lua Sprite tag"
        },
        "getPixelColor": {
            "returns": "number",
            "args": "obj:String, x:Int, y:Int",
            "documentation": "Gets the color of `obj` specific pixel"
        },
        "getProperty": {
            "returns": "?",
            "args": "variable:String, ?allowMaps:Bool = false",
            "documentation": "Returns a current variable from PlayState's name.\n\nIt can also be used to get the variable from an object that is inside PlayState or a Lua Sprite.\n\nExample: If you wanted to get the current health's value, you should use `getProperty('health')`.\n\nExample 2: If you'd want to get Boyfriend's current character, you should use `getProperty('boyfriend.curCharacter')`"
        },
        "getPropertyFromClass": {
            "returns": "?",
            "args": "classVar:String, variable:String, ?allowMaps:Bool = false",
            "documentation": "Works similar to `getProperty()`, but can be used to access a variable inside a Class other than PlayState.\n\nExample: To get how much time has passed since the last frame (in milliseconds), you should use `getPropertyFromClass('flixel.FlxG', 'elapsed')`."
        },
        "getPropertyFromGroup": {
            "returns": "?",
            "args": "obj:String, index:Int, variable:Dynamic, ?allowMaps:Bool = false",
            "documentation": "Gets a variable from an array/group member on PlayState.\n* `obj` - Group/Array variable\n* `index` - Member ID\n* `variable` - Variable to get the value\n\nExample: To get the next event note's strum Time, you should use `getPropertyFromGroup('eventNotes', 0, 0)`\n\nExample 2: To get the next unspawned note's noteData, you should use `getPropertyFromGroup('unspawnNotes', 0, 'noteData')`"
        },
        "getPropertyLuaSprite": {
            "returns": "?",
            "args": "tag:String, variable:String",
            "documentation": "Why are you using it?"
        },
        "getRandomBool": {
            "returns": "boolean",
            "args": "chance:Float = 50",
            "documentation": "Returns `true` with `chance` chance; else `false`"
        },
        "getRandomFloat": {
            "returns": "number",
            "args": "min:Float, max:Float = 1, exclude:String = ''",
            "documentation": "Returns randomly generated float"
        },
        "getRandomInt": {
            "returns": "number",
            "args": "min:Int, max:Int = FlxMath.MAX_VALUE_INT, exclude:String = ''",
            "documentation": "Returns randomly generated integer"
        },
        "getRunningScripts": {
            "returns": "array",
            "args": "",
            "documentation": "Returns array of all running lua scripts"
        },
        "getScore": {
            "returns": "number",
            "args": "",
            "documentation": "Returns current game score"
        },
        "getScreenPositionX": {
            "returns": "number",
            "args": "variable:String, ?camera:String",
            "documentation": "Returns the X position of `variable` on screen"
        },
        "getScreenPositionY": {
            "returns": "number",
            "args": "variable:String, ?camera:String",
            "documentation": "Returns the Y position of `variable` on screen"
        },
        "getShaderBool": {
            "returns": "boolean",
            "args": "obj:String, prop:String",
            "documentation": "Gets a boolean field from some shader"
        },
        "getShaderBoolArray": {
            "returns": "array",
            "args": "obj:String, prop:String",
            "documentation": "Gets a boolean array field from some shader"
        },
        "getShaderFloat": {
            "returns": "number",
            "args": "obj:String, prop:String",
            "documentation": "Gets a float field from some shader"
        },
        "getShaderFloatArray": {
            "returns": "array",
            "args": "obj:String, prop:String",
            "documentation": "Gets a float array field from some shader"
        },
        "getShaderInt": {
            "returns": "number",
            "args": "obj:String, prop:String",
            "documentation": "Gets a integer field from some shader"
        },
        "getShaderIntArray": {
            "returns": "array",
            "args": "obj:String, prop:String",
            "documentation": "Gets a integer array field from some shader"
        },
        "getSongPosition": {
            "returns": "number",
            "args": "",
            "documentation": "Returns the current song position. Shortcut to `getPropertyClass('Conductor', 'songPosition')`"
        },
        "getSoundTime": {
            "returns": "number",
            "args": "tag:String",
            "documentation": "Gets the current sound's position in miliseconds\n* `tag` - Sound tag"
        },
        "getSoundVolume": {
            "returns": "number",
            "args": "tag:String",
            "documentation": "* `tag` - Sound tag, leave this field empty if you want get the Background music's volume instead"
        },
        "getTextFont": {
            "returns": "string",
            "args": "tag:String",
            "documentation": "Gets text object's font at the specified tag"
        },
        "getTextFromFile": {
            "returns": "string",
            "args": "path:String, ?ignoreModFolders:Bool = false",
            "documentation": "Returns content of specific file in text"
        },
        "getTextSize": {
            "returns": "number",
            "args": "tag:String",
            "documentation": "Gets text object's size at the specified tag"
        },
        "getTextString": {
            "returns": "string",
            "args": "tag:String",
            "documentation": "Gets text object's text at the specified tag"
        },
        "getTextWidth": {
            "returns": "number",
            "args": "tag:String",
            "documentation": "Gets text object's width at the specified tag"
        },
        "getVar": {
            "returns": "?",
            "args": "varName:String",
            "documentation": "Gets a Lua variable from PlayState."
        },
        "initLuaShader": {
            "returns": "void",
            "args": "name:String, glslVersion:Int = 120",
            "documentation": "Initializes a new GLSL shader. This will get `name`.frag and `name`.vert files"
        },
        "initSaveData": {
            "returns": "void",
            "args": "name:String, ?folder:String = 'psychenginemods'",
            "documentation": "Initializes specific save"
        },
        "insertToCustomSubstate": {
            "returns": "boolean",
            "args": "tag:String, ?pos:Int = -1",
            "documentation": "Inserts a object to a custom substate."
        },
        "isRunning": {
            "returns": "boolean",
            "args": "luaFile:String",
            "documentation": "Checks if specific lua script is running"
        },
        "keyJustPressed": {
            "returns": "boolean",
            "args": "name:String = ''",
            "documentation": "Get if the key `name` just got pressed on the current frame.\n\nKeys: `'left'`, `'down'`, `'up'`, `'right'`, `'accept'`, `'back'`, `'pause'`, `'reset'`, `'space'`"
        },
        "keyPressed": {
            "returns": "boolean",
            "args": "name:String = ''",
            "documentation": "Get if the key `name` is being held on the current frame.\n\nKeys: `'left'`, `'down'`, `'up'`, `'right'`, `'space'`"
        },
        "keyReleased": {
            "returns": "boolean",
            "args": "name:String = ''",
            "documentation": "Get if the key `name` was released on the current frame.\n\nKeys: `'left'`, `'down'`, `'up'`, `'right'`, `'space'`"
        },
        "keyboardJustPressed": {
            "returns": "boolean",
            "args": "name:String",
            "documentation": "Checks if specific keyboard key was just pressed"
        },
        "keyboardPressed": {
            "returns": "boolean",
            "args": "name:String",
            "documentation": "Checks if specific keyboard key is pressed"
        },
        "keyboardReleased": {
            "returns": "boolean",
            "args": "name:String",
            "documentation": "Checks if specific keyboard key was just released"
        },
        "loadFrames": {
            "returns": "void",
            "args": "variable:String, image:String, spriteType:String = \"sparrow\"",
            "documentation": "Loads frames from some image"
        },
        "loadGraphic": {
            "returns": "void",
            "args": "variable:String, image:String, ?gridX:Int = 0, ?gridY:Int = 0",
            "documentation": "Loads a graphic"
        },
        "loadSong": {
            "returns": "void",
            "args": "?name:String = null, ?difficultyNum:Int = -1",
            "documentation": "Sets current chart to another song"
        },
        "luaSoundExists": {
            "returns": "boolean",
            "args": "tag:String",
            "documentation": "Checks if specific lua sound exists"
        },
        "luaSpriteAddAnimationByIndices": {
            "returns": "void",
            "args": "tag:String, name:String, prefix:String, indices:String, framerate:Int = 24",
            "documentation": "Why are you using it?"
        },
        "luaSpriteAddAnimationByPrefix": {
            "returns": "void",
            "args": "tag:String, name:String, prefix:String, framerate:Int = 24, loop:Bool = true",
            "documentation": "Why are you using it?"
        },
        "luaSpriteExists": {
            "returns": "boolean",
            "args": "tag:String",
            "documentation": "Checks if specific lua sprite exists"
        },
        "luaSpriteMakeGraphic": {
            "returns": "void",
            "args": "tag:String, width:Int, height:Int, color:String",
            "documentation": "Why are you using it?"
        },
        "luaSpritePlayAnimation": {
            "returns": "void",
            "args": "tag:String, name:String, forced:Bool = false",
            "documentation": "Why are you using it?"
        },
        "luaTextExists": {
            "returns": "boolean",
            "args": "tag:String",
            "documentation": "Checks if specifc lua text object exists"
        },
        "makeAnimatedLuaSprite": {
            "returns": "void",
            "args": "tag:String, ?image:String = null, ?x:Float = 0, ?y:Float = 0, ?spriteType:String = \"sparrow\"",
            "documentation": "Spawns a Lua Sprite that supports Animations, it will be using the tag `tag`, be using the image `image`.png, the XML `image`.xml, and will be spawned on position `x`, `y`\n\nIf another Lua Sprite that exists is already using the tag `tag`, it will be removed."
        },
        "makeGraphic": {
            "returns": "void",
            "args": "obj:String, width:Int = 256, height:Int = 256, color:String = 'FFFFFF'",
            "documentation": "Used for making an object use a solid color Width x Height frame instead of a texture.\n* `obj` - Lua Sprite tag or Object variable name\n* `width` - Width in pixels of the graphic you want to create\n`height` - Height in pixels of the graphic you want to create\n* `color` - Color string, works the same as `getColorFromHex()`\n\nExample: Use `makeGraphic('testBlackSquare', 1000, 1000, '000000')` to make the Lua Sprite with the tag \"testBlackSquare\" turn into a 1000x1000 black square."
        },
        "makeLuaSprite": {
            "returns": "void",
            "args": "tag:String, ?image:String = null, ?x:Float = 0, ?y:Float = 0",
            "documentation": "Spawns a Lua Sprite with no animations using the tag `tag`, it will be using the image `image`.png, and will be spawned on position `x`, `y` If you want to make a Black screen with no texture, leave `image` field empty and use (luaSpriteMakeGraphic)[]\n\nIf another Lua Sprite that exists is already using the tag `tag`, it will be removed."
        },
        "makeLuaText": {
            "returns": "void",
            "args": "tag:String, text:String, width:Int, x:Float, y:Float",
            "documentation": "Creates a Lua Text object on position `x`, `y` and a width with 'width'"
        },
        "mouseClicked": {
            "returns": "boolean",
            "args": "button:String",
            "documentation": "Get if the mouse button `name` just got pressed on the current frame. leave 'name' blank for left mouse\n\nButtons: `'left'`, `'right'`, `'middle'`"
        },
        "mousePressed": {
            "returns": "boolean",
            "args": "button:String",
            "documentation": "Get if the mouse button `name` is being held on the current frame.\n\nButtons: `'left'`, `'right'`, `'middle'`"
        },
        "mouseReleased": {
            "returns": "boolean",
            "args": "button:String",
            "documentation": "Get if the mouse button `name` was released on the current frame.\n\nButtons: `'left'`, `'right'`, `'middle'`"
        },
        "musicFadeIn": {
            "returns": "void",
            "args": "duration:Float, fromValue:Float = 0, toValue:Float = 1",
            "documentation": "Fades in the volume of music"
        },
        "musicFadeOut": {
            "returns": "void",
            "args": "duration:Float, toValue:Float = 0",
            "documentation": "Fades out the volume of music"
        },
        "noteTweenAlpha": {
            "returns": "void",
            "args": "tag:String, note:Int, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a tween on a receptor's Alpha value\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `note` - Opponent's notes are 0, 1, 2 and 3, respectively. Boyfriend's notes are 4, 5, 6, 7 respectively.\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note in the first line of this page"
        },
        "noteTweenAngle": {
            "returns": "void",
            "args": "tag:String, note:Int, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a tween on a receptor's Angle value\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `note` - Opponent's notes are 0, 1, 2 and 3, respectively. Boyfriend's notes are 4, 5, 6, 7 respectively.\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note in the first line of this page"
        },
        "noteTweenDirection": {
            "returns": "void",
            "args": "tag:String, note:Int, value:Dynamic, duration:Float, ease:String",
            "documentation": "Tweens the rotation of `note` for `duration` seconds"
        },
        "noteTweenX": {
            "returns": "void",
            "args": "tag:String, note:Int, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a tween on a receptor's X position\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `note` - Opponent's notes are 0, 1, 2 and 3, respectively. Boyfriend's notes are 4, 5, 6, 7 respectively.\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note in the first line of this page"
        },
        "noteTweenY": {
            "returns": "void",
            "args": "tag:String, note:Int, value:Dynamic, duration:Float, ease:String",
            "documentation": "Do a tween on a receptor's Y position\n* `tag` - Once the tween is finished, it will do a callback of `onTweenCompleted(tag)`\n* `note` - Opponent's notes are 0, 1, 2 and 3, respectively. Boyfriend's notes are 4, 5, 6, 7 respectively.\n* `value` - Target value on the tween end\n* `duration` - How much time it will take for the tween to end\n* `ease` - The tweening method used, example: `linear`, `circInOut`. Check the link on the note in the first line of this page"
        },
        "objectPlayAnimation": {
            "returns": "void",
            "args": "obj:String, name:String, forced:Bool = false, ?startFrame:Int = 0",
            "documentation": "Plays animation `name` on a Lua Sprite/Object with the tag/variable `obj`.\n* `obj` - Lua Sprite tag or Object variable name\n* `name` - Animation name to play\n* `forced` - If true, the animation will reset if the current animation is the same as the one you're trying to play. Default value is `false`"
        },
        "objectsOverlap": {
            "returns": "boolean",
            "args": "obj1:String, obj2:String",
            "documentation": "Checks if `obj1` overlaps/collides `obj2`"
        },
        "openCustomSubstate": {
            "returns": "void",
            "args": "name:String, ?pauseGame:Bool = false",
            "documentation": "Adds a custom substate named `name` to current FlxState"
        },
        "pauseSound": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "* `tag` - Sound tag"
        },
        "playAnim": {
            "returns": "void",
            "args": "obj:String, name:String, forced:Bool = false, ?reverse:Bool = false, ?startFrame:Int = 0",
            "documentation": "Plays a animation on specifc sprite"
        },
        "playMusic": {
            "returns": "void",
            "args": "sound:String, volume:Float = 1, loop:Bool = false",
            "documentation": "* `sound` - File name (Should be located in `mods/music/` or `assets/music/`)\n* `volume` - Optional value, volume percent goes from `0` to `1`. Default value: `1`\n* `volume` - Optional value, if the music should loop indefinitely. Default value: `false`"
        },
        "playSound": {
            "returns": "void",
            "args": "sound:String, volume:Float = 1, ?tag:String = null",
            "documentation": "* `sound` - File name (Should be located in `mods/sounds/` or `assets/sounds/`)\n* `volume` - Optional value, volume percent goes from `0` to `1`. Default value: `1`\n* OPTIONAL: `tag` - Should only be used if you want to pause, resume, change the time, volume or fade in/out your sound, if you don't want to use it, don't include a third value."
        },
        "precacheImage": {
            "returns": "void",
            "args": "name:String, ?allowGPU:Bool = true",
            "documentation": "* `name` - Asset name, should be located inside `mods/images/`\n\nNOTE: For now precacheImage is only capable of precaching images inside `mods/`!"
        },
        "precacheMusic": {
            "returns": "void",
            "args": "name:String",
            "documentation": "Precaches specific music"
        },
        "precacheSound": {
            "returns": "void",
            "args": "name:String",
            "documentation": "* `name` - Asset name, should be located inside `mods/sounds/` or `assets/sounds/`"
        },
        "removeFromGroup": {
            "returns": "void",
            "args": "obj:String, index:Int, dontDestroy:Bool = false",
            "documentation": "* `obj` - Group/Array variable\n* `index` - Member ID\n* `dontDestroy` - Optional variable. Won't clear member from memory, you will probably never ever use this.\n\nExample: To remove the first spawned note from the group you should use `removeFromGroup('notes', 0)`"
        },
        "removeLuaScript": {
            "returns": "void",
            "args": "luaFile:String, ?ignoreAlreadyRunning:Bool = false",
            "documentation": "Removes lua script from active list"
        },
        "removeLuaSprite": {
            "returns": "void",
            "args": "tag:String, destroy:Bool = true",
            "documentation": "Removes a Lua Sprite with the specified tag\n* `tag` - The Lua Sprite's tag\n* `destroy` - Specifies if you don't want to use the sprite anymore. Default value is `true` (Set to `false` if you want to re-add it later)"
        },
        "removeLuaText": {
            "returns": "void",
            "args": "tag:String, destroy:Bool = true",
            "documentation": "Removes a Lua Text off the stage\n* `tag` - The Lua Sprite's tag\n* `destroy` - Specifies if you don't want to use the sprite anymore. Default value is `true` (Set to `false` if you want to re-add it later)"
        },
        "removeSpriteShader": {
            "returns": "void",
            "args": "obj:String",
            "documentation": "Removes shader from sprite"
        },
        "restartSong": {
            "returns": "void",
            "args": "?skipTransition:Bool = false",
            "documentation": "Restarts current song"
        },
        "resumeSound": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "* `tag` - Sound tag"
        },
        "runHaxeCode": {
            "returns": "?",
            "args": "codeToRun:String, ?varsToBring:Any = null, ?funcToRun:String = null, ?funcArgs:Array<Dynamic> = null",
            "documentation": "Runs a haxe code and returns it's value"
        },
        "runHaxeFunction": {
            "returns": "?",
            "args": "funcToRun:String, ?funcArgs:Array<Dynamic> = null",
            "documentation": "Runs a haxe function code"
        },
        "runTimer": {
            "returns": "void",
            "args": "tag:String, time:Float = 1, loops:Int = 1",
            "documentation": "Runs a timer with a determined duration and loops count.\n\n**Calling this function will cancel another timer that is using the same tag!**\n* `tag` - Once the timer is finished, it will do a callback of `onTimerCompleted(tag, loops, loopsLeft)`\n* `time` - Optional value, how much time it takes to finish a loop. Default value is `1`\n* `loops` - Optional value, how much loops should it do, if it's set to `0`, it will repeat indefinitely. Default value is `1`"
        },
        "saveFile": {
            "returns": "void",
            "args": "path:String, content:String, ?absolute:Bool = false",
            "documentation": "Saves file with `content` content"
        },
        "scaleLuaSprite": {
            "returns": "void",
            "args": "tag:String, x:Float, y:Float",
            "documentation": "Why are you using it?"
        },
        "scaleObject": {
            "returns": "void",
            "args": "obj:String, x:Float, y:Float, updateHitbox:Bool = true",
            "documentation": "Works identically to `setGraphicSize()`"
        },
        "screenCenter": {
            "returns": "void",
            "args": "obj:String, pos:String = 'xy'",
            "documentation": "Centers a object on screen"
        },
        "setBlendMode": {
            "returns": "void",
            "args": "obj:String, blend:String = ''",
            "documentation": "Changes the blend mode of a Sprite (Works similar to how Photoshop do it)\n* `obj` - Lua Sprite tag or Object variable name\n* `blend` - Blend mode to use. Example: `add`, `darken`, `normal`.\n\n[List of blend modes](https://api.haxe.org/flash/display/BlendMode.html)"
        },
        "setCharacterX": {
            "returns": "void",
            "args": "type:String, value:Float",
            "documentation": "Sets the general X position of a character from the type `type`, this will also move all precached characters from the same type into the position you want\n* `type` - Can be `boyfriend`, `dad` or `gf`"
        },
        "setCharacterY": {
            "returns": "void",
            "args": "type:String, value:Float",
            "documentation": "Sets the general Y position of a character from the type `type`, this will also move all precached characters from the same type into the position you want\n* `type` - Can be `boyfriend`, `dad` or `gf`"
        },
        "setDataFromSave": {
            "returns": "void",
            "args": "name:String, field:String, value:Dynamic",
            "documentation": "Sets the data of specifc save to `value`"
        },
        "setGlobalFromScript": {
            "returns": "void",
            "args": "luaFile:String, global:String, val:Dynamic",
            "documentation": "Sets a global field value from specific lua script to `val`"
        },
        "setGraphicSize": {
            "returns": "void",
            "args": "obj:String, x:Int, y:Int = 0, updateHitbox:Bool = true",
            "documentation": "* `obj` - Object from PlayState or Lua Sprite\n* `multX` - Horizontal multiplier, default value is 1\n* `multY` - Vertical multiplier, default value is 1"
        },
        "setHealth": {
            "returns": "void",
            "args": "value:Float = 0",
            "documentation": "Sets player's health ranged from `0` to `2`"
        },
        "setHealthBarColors": {
            "returns": "void",
            "args": "left:String, right:String",
            "documentation": "Sets the colors player's health bar (in hex)"
        },
        "setHits": {
            "returns": "void",
            "args": "value:Int = 0",
            "documentation": "Set the current song's notes hit total to `value` and recalculates rating"
        },
        "setLuaSpriteCamera": {
            "returns": "void",
            "args": "tag:String, camera:String = ''",
            "documentation": "Why are you using it?"
        },
        "setLuaSpriteScrollFactor": {
            "returns": "void",
            "args": "tag:String, scrollX:Float, scrollY:Float",
            "documentation": "Why are you using it?"
        },
        "setMisses": {
            "returns": "void",
            "args": "value:Int = 0",
            "documentation": "Set the current song's misses total to `value` and recalculates rating"
        },
        "setObjectCamera": {
            "returns": "void",
            "args": "obj:String, camera:String = ''",
            "documentation": "Changes on which camera should your object be drawn on\n* `obj` - Lua Sprite tag or Object variable name\n* `camera` - `game`, `hud` or `other`."
        },
        "setObjectOrder": {
            "returns": "void",
            "args": "obj:String, position:Int",
            "documentation": "Sets the object's layer position\n* `obj` - Object variable/Lua Sprite tag\n* `position` - New position the object will be in\n\n(note: when referring to characters, you must refer to their group) `boyfriendGroup`, `gfGroup`, `dadGroup`"
        },
        "setProperty": {
            "returns": "boolean",
            "args": "variable:String, value:Dynamic, allowMaps:Bool = false",
            "documentation": "Works in the same way as `getProperty()`, but it sets a new value for the variable.\n\nAlso returns the new value of the variable.\n\nExample: To set the player's current health to 100%, you should use `setProperty('health', 2)`"
        },
        "setPropertyFromClass": {
            "returns": "boolean",
            "args": "classVar:String, variable:String, value:Dynamic, ?allowMaps:Bool = false",
            "documentation": "Works similar to `setProperty()`, but can be used to access a variable inside a Class other than PlayState.\n\nExample: To make the mouse visible, you should use `getPropertyFromClass('FlxG', 'mouse.visible', true)`."
        },
        "setPropertyFromGroup": {
            "returns": "void",
            "args": "obj:String, index:Int, variable:Dynamic, value:Dynamic, ?allowMaps:Bool = false",
            "documentation": "Sets the new value to a variable from an array/group member on PlayState.\n* `obj` - Group/Array variable\n* `index` - Member ID\n* `variable` - Variable to get the value\n* `value` - New value to set"
        },
        "setPropertyLuaSprite": {
            "returns": "void",
            "args": "tag:String, variable:String, value:Dynamic",
            "documentation": "Why are you using it?"
        },
        "setRatingFC": {
            "returns": "void",
            "args": "value:String",
            "documentation": "Sets the FC rating"
        },
        "setRatingName": {
            "returns": "void",
            "args": "value:String",
            "documentation": "Sets the rating message"
        },
        "setRatingPercent": {
            "returns": "void",
            "args": "value:Float",
            "documentation": "Sets the rating percent in case you want to do your own rating calculation.\n* `value` - Should go from `0` to `1` but can actually be whatever value you want, but it's kinda stupid to get out of the base values."
        },
        "setRatingString": {
            "returns": "void",
            "args": "value:String",
            "documentation": "Sets the rating name to `value` in case you want to do your own rating calculation.",
            "deprecated": "Removed from the API."
        },
        "setScore": {
            "returns": "void",
            "args": "value:Int = 0",
            "documentation": "Set the current song's score to `value` and recalculates rating"
        },
        "setScrollFactor": {
            "returns": "void",
            "args": "obj:String, scrollX:Float, scrollY:Float",
            "documentation": "Changes how much a Sprite moves along with the camera.\n* `obj` - Lua Sprite tag or Object variable name\n* `scrollX` - Horizontal movement multiplier\n* `scrollY` - Vertical movement multiplier\n\nNote: Boyfriend/Opponent have a scrollX/scrollY value of 1, while Girlfriend have a scrollX/scrollY value of 0.95, if you're gonna do background elements, it's highly suggested that you make the values something under 1."
        },
        "setShaderBool": {
            "returns": "void",
            "args": "obj:String, prop:String, value:Bool",
            "documentation": "Sets some shader's boolean field to `value`"
        },
        "setShaderBoolArray": {
            "returns": "void",
            "args": "obj:String, prop:String, values:Dynamic",
            "documentation": "Sets some shader's boolean array field to `value`"
        },
        "setShaderFloat": {
            "returns": "void",
            "args": "obj:String, prop:String, value:Float",
            "documentation": "Sets some shader's float field to `value`"
        },
        "setShaderFloatArray": {
            "returns": "void",
            "args": "obj:String, prop:String, values:Dynamic",
            "documentation": "Sets some shader's float array field to `value`"
        },
        "setShaderInt": {
            "returns": "void",
            "args": "obj:String, prop:String, value:Int",
            "documentation": "Sets some shader's integer field to `value`"
        },
        "setShaderIntArray": {
            "returns": "void",
            "args": "obj:String, prop:String, values:Dynamic",
            "documentation": "Sets some shader's integer array field to `value`"
        },
        "setShaderSampler2D": {
            "returns": "void",
            "args": "obj:String, prop:String, bitmapdataPath:String",
            "documentation": "Sets the shader sampler bitmap to `bitmapdataPath` image"
        },
        "setSoundTime": {
            "returns": "void",
            "args": "tag:String, value:Float",
            "documentation": "Sets the current sound's position in miliseconds\n* `tag` - Sound tag\n* `value` - New position"
        },
        "setSoundVolume": {
            "returns": "void",
            "args": "tag:String, value:Float",
            "documentation": "* `tag` - Sound tag, leave this field empty if you want change the Background music's volume instead\n* `value` - Goes from `0` to `1`."
        },
        "setSpriteShader": {
            "returns": "void",
            "args": "obj:String, shader:String",
            "documentation": "Sets the shader of some `obj` to `shader`"
        },
        "setTextAlignment": {
            "returns": "void",
            "args": "tag:String, alignment:String = 'left'",
            "documentation": "Sets text alignment at the specified tag `'left'`,`'right'`, or `'center'`"
        },
        "setTextBorder": {
            "returns": "void",
            "args": "tag:String, size:Int, color:String",
            "documentation": "Sets text border at the specified tag"
        },
        "setTextColor": {
            "returns": "void",
            "args": "tag:String, color:String",
            "documentation": "Sets text color at the specified tag"
        },
        "setTextFont": {
            "returns": "void",
            "args": "tag:String, newFont:String",
            "documentation": "Sets text font at the specified tag"
        },
        "setTextItalic": {
            "returns": "void",
            "args": "tag:String, italic:Bool",
            "documentation": "Sets text as italic or not based on the `italic` parameter"
        },
        "setTextSize": {
            "returns": "void",
            "args": "tag:String, size:Int",
            "documentation": "Sets text size at the specified tag"
        },
        "setTextString": {
            "returns": "void",
            "args": "tag:String, text:String",
            "documentation": "Sets text string at the specified tag"
        },
        "setTextWidth": {
            "returns": "void",
            "args": "tag:String, width:Float",
            "documentation": "Sets text width at the specified tag"
        },
        "setTimeBarColors": {
            "returns": "void",
            "args": "left:String, right:String",
            "documentation": "Sets the colors of time progress bar (in hex)"
        },
        "setVar": {
            "returns": "void",
            "args": "varName:String, value:Dynamic",
            "documentation": "Sets a Lua variable in the PlayState class."
        },
        "soundFadeCancel": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "* `tag` - Sound tag, leave this field empty if you want cancel the Background music's fade in/out instead"
        },
        "soundFadeIn": {
            "returns": "void",
            "args": "tag:String, duration:Float, fromValue:Float = 0, toValue:Float = 1",
            "documentation": "* `tag` - Sound tag, leave this field empty if you want to do a fade in on the Background music instead\n`duration` - The time it takes for the volume to go from `fromValue` to `toValue`\n* `fromValue` - Starting value. Default value is `0`\n* `toValue` - End value. Default value is `1`"
        },
        "soundFadeOut": {
            "returns": "void",
            "args": "tag:String, duration:Float, toValue:Float = 0",
            "documentation": "* `tag` - Sound tag, leave this field empty if you want to do a fade out on the Background music instead\n* `duration` - The time it takes for the volume to go from the starting volume to `toValue`\n* `toValue` - End value. Default value is `0`"
        },
        "startCountdown": {
            "returns": "void",
            "args": "",
            "documentation": "In case you forced a countdown stop for doing a pre-song cutscene or something, this starts the countdown again manually."
        },
        "startDialogue": {
            "returns": "void",
            "args": "dialogueFile:String, music:String = null",
            "documentation": "Starts a dialogue loading a file inside `mods/data/your-song-name/`.\n* `dialogueFile` - .TXT file to load\n* `song` - Optional value for a Background music during the dialogue\n\nExample: If i want to load a dialogue file `mods/data/bopeebo/dialogue.txt` using the pause menu song (Breakfast), i should use: `startDialogue('bopeebo/dialogue', 'breakfast')`\n\nNOTE: When the dialogue is ended, it calls `startCountdown()`\n\nNOTE 2: `onNextDialogue(line)` callback is called for every dialogue line passed"
        },
        "startTween": {
            "returns": "void",
            "args": "tag:String, vars:String, values:Any = null, duration:Float, options:Any = null",
            "documentation": "Starts a tween."
        },
        "startVideo": {
            "returns": "void",
            "args": "videoFile:String",
            "documentation": "Starts a Video Cutscene\n* `videoFile` - File name of your video, it must be inside `mods/videos/`\n\nExample: If you wanted to start the video `mods/videos/ughCutscene.mp4`, you'd have to use `startVideo('ughCutscene')`"
        },
        "stopSound": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "This function will stop the sound AND remove it permanently!\n* `tag` - Sound tag"
        },
        "stringEndsWith": {
            "returns": "boolean",
            "args": "str:String, end:String",
            "documentation": "Checks if `str` ends with `end`"
        },
        "stringSplit": {
            "returns": "array",
            "args": "str:String, split:String",
            "documentation": "Splits string with `split` delimeter to array of strings"
        },
        "stringStartsWith": {
            "returns": "boolean",
            "args": "str:String, start:String",
            "documentation": "Checks if `str` starts with `start`"
        },
        "stringTrim": {
            "returns": "string",
            "args": "str:String",
            "documentation": "Removes empty characters from the beginning and end of `string`"
        },
        "triggerEvent": {
            "returns": "void",
            "args": "name:String, arg1:Dynamic, arg2:Dynamic",
            "documentation": "Triggers an event without you having to chart them.\n* `name` - Event name on Chart Editor\n* `arg1` - Value 1 on Chart Editor\n* `arg2` - Value 2 on Chart Editor"
        },
        "updateHitbox": {
            "returns": "void",
            "args": "obj:String",
            "documentation": "Use this to update the hitbox in case you change the sprite's scale manually or via a tween.\n* `obj` - Object from PlayState or Lua Sprite"
        },
        "updateHitboxFromGroup": {
            "returns": "void",
            "args": "group:String, index:Int",
            "documentation": "Updates the hitbox of item with index `index` in group `group`"
        },
        "isAchievementUnlocked": {
            "returns": "boolean",
            "args": "name:String",
            "documentation": "Checks if an achievement is unlocked"
        },
        "unlockAchievement": {
            "returns": "void",
            "args": "name:String",
            "documentation": "Unlocks an achievement"
        },
        "addAchievementScore": {
            "returns": "void",
            "args": "name:String, ?value:Dynamic = 1, ?saveIfNotUnlocked:Bool = true",
            "documentation": ""
        },
        "setAchievementScore": {
            "returns": "void",
            "args": "name:String, ?value = 1, ?saveIfNotUnlocked = true",
            "documentation": ""
        },
        "getAchievementScore": {
            "returns": "?",
            "args": "name:String",
            "documentation": ""
        },
        "achievementExists": {
            "returns": "boolean",
            "args": "name:String",
            "documentation": "Checks if an achievement exists"
        },
        "getModSetting": {
            "returns": "?",
            "args": "name:String, ?modFolder:String = null",
            "documentation": "Returns the value of a mod setting"
        },
        "makeFlxAnimateSprite": {
            "returns": "void",
            "args": "tag:String, ?x:Float = 0, ?y:Float = 0, ?loadFolder:String = null",
            "documentation": ""
        },
        "loadAnimateAtlas": {
            "returns": "void",
            "args": "tag:String, folderOrImg:String, ?spriteJson:String = null, ?animationJson:String = null",
            "documentation": ""
        },
        "addAnimationBySymbol": {
            "returns": "void",
            "args": "tag:String, name:String, symbol:String, ?framerate:Float = 24, ?loop:Bool = false, ?matX:Float = 0, ?matY:Float = 0",
            "documentation": "Adds sprite's animation by all indices from a symbol"
        },
        "addAnimationBySymbolIndices": {
            "returns": "void",
            "args": "tag:String, name:String, symbol:String, ?indices:Any = null, ?framerate:Float = 24, ?loop:Bool = false, ?matX:Float = 0, ?matY:Float = 0",
            "documentation": "Adds sprite's animation by specific indices from a symbol"
        },
        "setTextHeight": {
            "returns": "void",
            "args": "tag:String, height:Int",
            "documentation": "Sets the height of specified text"
        },
        "setTextAutoSize": {
            "returns": "void",
            "args": "tag:String, value:Bool",
            "documentation": ""
        },
        "removeHScript": {
            "returns": "boolean",
            "args": "luaFile:String, ?ignoreAlreadyRunning:Bool = false",
            "documentation": ""
        },
        "instanceArg": {
            "returns": "string",
            "args": "instanceName:String, ?className:String = null",
            "documentation": ""
        }
    },
    "variables": {
        "Function_Continue": {
            "returns": "number",
            "documentation": "Continues function"
        },
        "Function_Stop": {
            "returns": "number",
            "documentation": "Stops function"
        },
        "Function_StopLua": {
            "returns": "number",
            "documentation": "Stops function"
        },
        "altAnim": {
            "returns": "boolean",
            "documentation": "Tells if the current section is a `Alt Animation` Section (from Chart Editor)"
        },
        "botPlay": {
            "returns": "boolean",
            "documentation": "Tells if Botplay is enabled. Shortcut to `getProperty('cpuControlled')`"
        },
        "boyfriendName": {
            "returns": "string",
            "documentation": "First name BOYFRIEND last name .xml (but seriously it's current character name of boyfriend)"
        },
        "bpm": {
            "returns": "number",
            "documentation": "Starting BPM of the Song, shortcut to `getProperty('SONG.bpm')`"
        },
        "buildTarget": {
            "returns": "string",
            "documentation": "The build target, should be `windows`, `linux`, `mac`, `browser`, `android` or `unknown` (useful to block playing a mod on gamaverse)"
        },
        "cameraX": {
            "returns": "number",
            "documentation": "Shortcut to `getProperty('camFollowPos.x')`"
        },
        "cameraY": {
            "returns": "number",
            "documentation": "Shortcut to `getProperty('camFollowPos.y')`"
        },
        "cameraZoomOnBeat": {
            "returns": "boolean",
            "documentation": "Shortcut to `getPropertyFromClass('ClientPrefs', 'camZooms')`"
        },
        "combo": {
            "returns": "number",
            "documentation": "Returns the current combo"
        },
        "crochet": {
            "returns": "number",
            "documentation": "Interval between Beat hits"
        },
        "curBeat": {
            "returns": "number",
            "documentation": "Current beat number"
        },
        "curBpm": {
            "returns": "number",
            "documentation": "Current BPM of the Song, shortcut to `getPropertyFromClass('Conductor', 'bpm')`"
        },
        "curDecBeat": {
            "returns": "number",
            "documentation": "Returns current beat in a decimal (float) value"
        },
        "curDecStep": {
            "returns": "number",
            "documentation": "Returns current step in a decimal (float) value"
        },
        "curSection": {
            "returns": "number",
            "documentation": "Returns the current section"
        },
        "curStage": {
            "returns": "string",
            "documentation": "Returns the id/name of current stage"
        },
        "curStep": {
            "returns": "number",
            "documentation": "Current step number"
        },
        "currentModDirectory": {
            "returns": "string",
            "documentation": "Returns the path to current mod"
        },
        "dadName": {
            "returns": "string",
            "documentation": "Dad`s current character name"
        },
        "defaultBoyfriendX": {
            "returns": "number",
            "documentation": "Player's Default X position, defined by the Stage's JSON file."
        },
        "defaultBoyfriendY": {
            "returns": "number",
            "documentation": "Player's Default Y position, defined by the Stage's JSON file."
        },
        "defaultGirlfriendX": {
            "returns": "number",
            "documentation": "Girlfriend's Default X position, defined by the Stage's JSON file."
        },
        "defaultGirlfriendY": {
            "returns": "number",
            "documentation": "Girlfriend's Default Y position, defined by the Stage's JSON file."
        },
        "defaultOpponentStrumX": {
            "returns": "number",
            "documentation": "Returns default X position of opponents strumline"
        },
        "defaultOpponentStrumX0": {
            "returns": "number",
            "documentation": "Opponent's default left arrow X"
        },
        "defaultOpponentStrumX1": {
            "returns": "number",
            "documentation": "Opponent's default down arrow X"
        },
        "defaultOpponentStrumX2": {
            "returns": "number",
            "documentation": "Opponent's default up arrow X"
        },
        "defaultOpponentStrumX3": {
            "returns": "number",
            "documentation": "Opponent's default right arrow X"
        },
        "defaultOpponentStrumY": {
            "returns": "number",
            "documentation": "Returns default Y position of opponents strumline"
        },
        "defaultOpponentStrumY0": {
            "returns": "number",
            "documentation": "Opponent's default left arrow Y"
        },
        "defaultOpponentStrumY1": {
            "returns": "number",
            "documentation": "Opponent's default down arrow Y"
        },
        "defaultOpponentStrumY2": {
            "returns": "number",
            "documentation": "Opponent's default up arrow Y"
        },
        "defaultOpponentStrumY3": {
            "returns": "number",
            "documentation": "Opponent's default right arrow Y"
        },
        "defaultOpponentX": {
            "returns": "number",
            "documentation": "Opponent's Default X position, defined by the Stage's JSON file."
        },
        "defaultOpponentY": {
            "returns": "number",
            "documentation": "Opponent's Default Y position, defined by the Stage's JSON file."
        },
        "defaultPlayerStrumX": {
            "returns": "number",
            "documentation": "Returns default X position of player strumline"
        },
        "defaultPlayerStrumX0": {
            "returns": "number",
            "documentation": "Player's default left arrow X"
        },
        "defaultPlayerStrumX1": {
            "returns": "number",
            "documentation": "Player's default down arrow X"
        },
        "defaultPlayerStrumX2": {
            "returns": "number",
            "documentation": "Player's default up arrow X"
        },
        "defaultPlayerStrumX3": {
            "returns": "number",
            "documentation": "Player's default right arrow X"
        },
        "defaultPlayerStrumY": {
            "returns": "number",
            "documentation": "Returns default Y position of player strumline"
        },
        "defaultPlayerStrumY0": {
            "returns": "number",
            "documentation": "Player's default left arrow Y"
        },
        "defaultPlayerStrumY1": {
            "returns": "number",
            "documentation": "Player's default down arrow Y"
        },
        "defaultPlayerStrumY2": {
            "returns": "number",
            "documentation": "Player's default up arrow Y"
        },
        "defaultPlayerStrumY3": {
            "returns": "number",
            "documentation": "Player's default right arrow Y"
        },
        "difficulty": {
            "returns": "number",
            "documentation": "Returns the difficulty ID (Easy = 0, Normal = 1, Hard = 2), Shortcut to `getProperty('storyDifficulty')`"
        },
        "difficultyName": {
            "returns": "string",
            "documentation": "The difficulty of current difficulty"
        },
        "difficultyPath": {
            "returns": "string",
            "documentation": "Returns path of current song chart"
        },
        "downscroll": {
            "returns": "boolean",
            "documentation": "Downscroll is enabled. Shortcut to `getPropertyFromClass('ClientPrefs', 'downScroll')`"
        },
        "flashingLights": {
            "returns": "boolean",
            "documentation": "Shortcut to `getPropertyFromClass('ClientPrefs', 'flashing')`"
        },
        "framerate": {
            "returns": "boolean",
            "documentation": "Current framerate limit. Shortcut to `getPropertyFromClass('ClientPrefs', 'framerate')`"
        },
        "gfName": {
            "returns": "string",
            "documentation": "Gf's current character name"
        },
        "gfSection": {
            "returns": "boolean",
            "documentation": "Tells if the current section is a `GF Section` (from Chart Editor)"
        },
        "ghostMisses": {
            "returns": "number",
            "documentation": "Current number of Key press misses, Shortcut to `getProperty('ghostMisses')`"
        },
        "ghostTapping": {
            "returns": "boolean",
            "documentation": "Ghost tapping is enabled. Shortcut to `getPropertyFromClass('ClientPrefs', 'ghostTapping')`"
        },
        "hasVocals": {
            "returns": "boolean",
            "documentation": "Checks if the current song needs voices"
        },
        "healthBarAlpha": {
            "returns": "number",
            "documentation": "Current alpha value of health bar"
        },
        "healthGainMult": {
            "returns": "number",
            "documentation": "The gain multiplayer of health"
        },
        "healthLossMult": {
            "returns": "number",
            "documentation": "The loss multiplayer of health"
        },
        "hideHud": {
            "returns": "boolean",
            "documentation": "\"Hide HUD\" is enabled. Shortcut to `getPropertyFromClass('ClientPrefs', 'hideHud')`"
        },
        "hideTime": {
            "returns": "boolean",
            "documentation": "\"Hide Song Length\" is enabled. Shortcut to `getPropertyFromClass('ClientPrefs', 'hideTime')`"
        },
        "hits": {
            "returns": "number",
            "documentation": "Current number of notes hit, Shortcut to `getProperty('songHits')`"
        },
        "inChartEditor": {
            "returns": "boolean",
            "documentation": "Tells you if your script is running on Chart Editor's chart playtest."
        },
        "inGameOver": {
            "returns": "boolean",
            "documentation": "Player is Dead"
        },
        "instakillOnMiss": {
            "returns": "boolean",
            "documentation": "Returns if miss == death"
        },
        "isStoryMode": {
            "returns": "boolean",
            "documentation": "Shortcut to `getProperty('isStoryMode')`"
        },
        "lowQuality": {
            "returns": "boolean",
            "documentation": "Shortcut to `getPropertyFromClass('ClientPrefs', 'lowQuality')`"
        },
        "luaDebugMode": {
            "returns": "boolean",
            "documentation": "Enables debug mode, use `luaDebugMode = true` to enable it. Default value: `false`"
        },
        "luaDeprecatedWarnings": {
            "returns": "boolean",
            "documentation": "Tells you if a function/variable is deprecated (shouldn't be used anymore), only works when Debug mode is on, use `luaDeprecatedWarnings = false` to disable it. Default value: `true`"
        },
        "middlescroll": {
            "returns": "boolean",
            "documentation": "Middlescroll is enabled. Shortcut to `getPropertyFromClass('ClientPrefs', 'middleScroll')`"
        },
        "misses": {
            "returns": "number",
            "documentation": "Current total number of notes missed, Shortcut to `getProperty('songMisses')`"
        },
        "mustHitSection": {
            "returns": "boolean",
            "documentation": "Tells if the current section is a `Must Hit Section` (from Chart Editor)"
        },
        "noResetButton": {
            "returns": "boolean",
            "documentation": "If true reset button does nothing"
        },
        "noteOffset": {
            "returns": "number",
            "documentation": "Represents the note delay in milliseconds (Goes from `0` to `500`). Shortcut to `getPropertyFromClass('ClientPrefs', 'noteOffset')`"
        },
        "noteSkin": {
            "returns": "string",
            "documentation": "Returns the current note skin name"
        },
        "noteSkinPostfix": {
            "returns": "string",
            "documentation": "Returns the current note skin post fix"
        },
        "playbackRate": {
            "returns": "number",
            "documentation": "Pitch of current song"
        },
        "practice": {
            "returns": "boolean",
            "documentation": "Whatever or not practice mode is on"
        },
        "rating": {
            "returns": "number",
            "documentation": "Current rating percentage, goes from `0` to `1`. Shortcut to `getProperty('ratingPercent')`"
        },
        "ratingFC": {
            "returns": "string",
            "documentation": "Returns current FC rating"
        },
        "ratingName": {
            "returns": "string",
            "documentation": "Current rating's name. Shortcut to `getProperty('ratingString')`"
        },
        "score": {
            "returns": "number",
            "documentation": "Current score, Shortcut to `getProperty('songScore')`"
        },
        "scoreZoom": {
            "returns": "boolean",
            "documentation": "Returns whatever or not score bar should be zoomed when a note is hit"
        },
        "screenHeight": {
            "returns": "number",
            "documentation": "Shortcut to `getPropertyFromClass('FlxG', height)`"
        },
        "screenWidth": {
            "returns": "number",
            "documentation": "Shortcut to `getPropertyFromClass('FlxG', width)`"
        },
        "scriptName": {
            "returns": "string",
            "documentation": "The name/id of this script"
        },
        "scrollSpeed": {
            "returns": "number",
            "documentation": "Starting Scroll speed of the Song, shortcut to `getProperty('SONG.speed')`"
        },
        "seenCutscene": {
            "returns": "boolean",
            "documentation": "Is set to `true` after `onCreate()` function, Shortcut to `getProperty('seenCutscene')`"
        },
        "shadersEnabled": {
            "returns": "boolean",
            "documentation": "Whetever or not shaders are enabled by player"
        },
        "songLength": {
            "returns": "number",
            "documentation": "Song duration in milliseconds"
        },
        "songName": {
            "returns": "string",
            "documentation": "Shortcut to `getProperty('SONG.song')`"
        },
        "songPath": {
            "returns": "string",
            "documentation": "Returns path of current song"
        },
        "splashAlpha": {
            "returns": "number",
            "documentation": "Returns the current splash alpha"
        },
        "splashSkin": {
            "returns": "string",
            "documentation": "Returns the current splash skin name"
        },
        "splashSkinPostfix": {
            "returns": "string",
            "documentation": "Returns the current splash skin post fix"
        },
        "startedCountdown": {
            "returns": "boolean",
            "documentation": "Tells you if the countdown already started"
        },
        "stepCrochet": {
            "returns": "number",
            "documentation": "Interval between Step hits"
        },
        "timeBarType": {
            "returns": "string",
            "documentation": "Returns the type of timebar"
        },
        "version": {
            "returns": "string",
            "documentation": "Returns the version of engine"
        },
        "week": {
            "returns": "string",
            "documentation": "Returns the properly formatted current week file name."
        },
        "weekRaw": {
            "returns": "number",
            "documentation": "Returns the raw current week number. I doubt you will ever use this, but hey, just in case you do, it's here."
        }
    },
    "events": {
        "eventEarlyTrigger": {
            "returns": "number",
            "args": "eventName:String, value1:String, value2:String, strumTime:Float",
            "documentation": "Local function called before event note triggers, must return the miliseconds event delay"
        },
        "goodNoteHit": {
            "returns": "void",
            "args": "membersIndex:Int, noteData:Int, noteType:String, isSustainNote:Bool",
            "documentation": "Local function called when player hits a note"
        },
        "noteMiss": {
            "returns": "void",
            "args": "membersIndex:Int, noteData:Int, noteType:String, isSustainNote:Bool",
            "documentation": "Local function called when player misses a note, (`badNoteHit()`?)"
        },
        "noteMissPress": {
            "returns": "void",
            "args": "direction:Int",
            "documentation": "Local function called when player misses"
        },
        "onBeatHit": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called every song beat"
        },
        "onCountdownStarted": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called when after countdown"
        },
        "onCountdownTick": {
            "returns": "void",
            "args": "swagCounter:Int",
            "documentation": "Local function called every countdown tick"
        },
        "onCreate": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called after registering all lua functions/variables"
        },
        "onCreatePost": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called after initializing every main function/variables"
        },
        "onCustomSubstateCreate": {
            "returns": "void",
            "args": "name:String",
            "documentation": "Local function called when custom substate is created"
        },
        "onCustomSubstateCreatePost": {
            "returns": "void",
            "args": "name:String",
            "documentation": "Local function called after custom substate `create()` function gets called"
        },
        "onCustomSubstateDestroy": {
            "returns": "void",
            "args": "name:String",
            "documentation": "Local function called after custom substate gets destroyed"
        },
        "onCustomSubstateUpdate": {
            "returns": "void",
            "args": "name:String, elapsed:Float",
            "documentation": "Local function called when custom substate updates"
        },
        "onCustomSubstateUpdatePost": {
            "returns": "void",
            "args": "name:String, elapsed:Float",
            "documentation": "Local function called after custom substate `update()` function gets called"
        },
        "onDestroy": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called when this script gets released from the memory"
        },
        "onEndSong": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called when song ends"
        },
        "onEvent": {
            "returns": "void",
            "args": "eventName:String, value1:String, value2:String, strumTime:Float",
            "documentation": "Local function called when some event gets triggered"
        },
        "onGameOver": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called when player fucking dies"
        },
        "onGameOverConfirm": {
            "returns": "void",
            "args": "isNotGoingToMenu:Float",
            "documentation": "Local function called when player presses [[Confirm]] to restart current playstate or go back to menu"
        },
        "onGameOverStart": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called when gameover screen is created"
        },
        "onGhostTap": {
            "returns": "void",
            "args": "key:Int",
            "documentation": "Local function called when player ghost taps"
        },
        "onKeyPress": {
            "returns": "void",
            "args": "key:Int",
            "documentation": "Local function called when player presses some key"
        },
        "onKeyRelease": {
            "returns": "void",
            "args": "key:Int",
            "documentation": "Local function called when player releases some key"
        },
        "onMoveCamera": {
            "returns": "void",
            "args": "character:String",
            "documentation": "Local function called when camera focuses on specific character, characters: `gf`, `dad`, `boyfriend`"
        },
        "onNextDialogue": {
            "returns": "void",
            "args": "dialogueCount:Int",
            "documentation": "Local function called when dialogue goes to another page"
        },
        "onPause": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called after game pauses"
        },
        "onRecalculateRating": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called accuracy percent is recalculated/updates"
        },
        "onResume": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called after game resumes"
        },
        "onSectionHit": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called when jumping to another section"
        },
        "onSkipDialogue": {
            "returns": "void",
            "args": "dialogueCount:Int",
            "documentation": "Local function called when dialogue is skipped"
        },
        "onSongStart": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called when song starts"
        },
        "onSoundFinished": {
            "returns": "void",
            "args": "tag:String",
            "documentation": "Local function called after specific sound with `tag` tag finishes"
        },
        "onSpawnNote": {
            "returns": "void",
            "args": "membersIndex:Int, noteData:Int, noteType:String, isSustainNote:Bool, strumTime:Float",
            "documentation": "Local function called when game note is spawned"
        },
        "onStartCountdown": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called when countdown is started"
        },
        "onStepHit": {
            "returns": "void",
            "args": "",
            "documentation": "Local function called every song step"
        },
        "onTimerCompleted": {
            "returns": "void",
            "args": "tag:String, loops:Integer, loopsLeft:Integer",
            "documentation": "Local function called everytime `tag` timer loops/completes"
        },
        "onTweenCompleted": {
            "returns": "void",
            "args": "tag:String, ?vars:?",
            "documentation": "Local function called after specific `tag` tween is completed"
        },
        "onUpdate": {
            "returns": "void",
            "args": "elapsed:Float",
            "documentation": "Local function called when playstate/gameover screen is updated"
        },
        "onUpdatePost": {
            "returns": "void",
            "args": "elapsed:Float",
            "documentation": "Local function called when playstate/gameover screen `update()` function is called"
        },
        "onUpdateScore": {
            "returns": "void",
            "args": "miss:Boolean",
            "documentation": "Local function called when score text gets updated"
        },
        "opponentNoteHit": {
            "returns": "void",
            "args": "membersIndex:Int, noteData:Int, noteType:String, isSustainNote:Bool",
            "documentation": "Local function called when opponent hits a note"
        },
        "goodNoteHitPost": {
            "returns": "void",
            "args": "membersIndex:Int, noteData:Int, noteType:String, isSustainNote:Bool",
            "documentation": "Local function called after Playstate's goodNoteHit function"
        },
        "opponentNoteHitPost": {
            "returns": "void",
            "args": "membersIndex:Int, noteData:Int, noteType:String, isSustainNote:Bool",
            "documentation": "Local function called after the game registers opponents note hit"
        }
    }
}